//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file   Timer.h
//!
//! @brief  時間計測クラスのヘッダファイル
//!
//! @date   2014/10/10
//!
//! @author 高木 晋
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルード防止 ====================================================
#pragma once




// ヘッダファイルの読み込み ================================================
#include <Windows.h>




// クラス定義 ==============================================================
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//! @brief 時間計測クラス
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
class Timer
{
	// クラス内定数 --------------------------------------------
public:
	static const UINT ONE_SECOND = 1000000;    //!< 1秒[ns]



											   // 静的メンバ変数 -----------------------------------------
private:
	static LARGE_INTEGER s_frequency;    //!< 高精度タイマの周波数(1秒あたりのカウント数)



										 // メンバ変数 ---------------------------------------------
private:
	LARGE_INTEGER m_startCount;    //!< 計測開始カウント



								   // コンストラクタ -----------------------------------------
public:
	Timer();



	// デストラクタ -------------------------------------------
public:
	~Timer() = default;



	// 属性 ---------------------------------------------------
public:
	// 時間[ns]の取得
	UINT GetTime() const;



	// 操作 ---------------------------------------------------
public:
	// 計測開始時間のリセット
	void Reset();



	// 非実装 --------------------------------------------------
private:
	// コピーコンストラクタ
	Timer(const Timer&) = delete;

	// ムーブコンストラクタ
	Timer(Timer&&) = delete;

	// 代入演算子
	Timer& operator=(const Timer&) = delete;

	// ムーブ代入演算子
	Timer& operator=(Timer&&) = delete;
};