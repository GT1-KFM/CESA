//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file   Keyboard.h
//!
//! @brief  キーボードクラスのヘッダファイル
//!
//! @date   2014/10/10
//!
//! @author 高木 晋
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルード防止 ====================================================
#pragma once




// ヘッダファイルの読み込み ================================================
#include <Windows.h>




// クラス定義 ==============================================================
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//! @brief キーボードクラス
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
class Keyboard final
{
	// クラス内クラス ------------------------------------------
private:
	//! @brief キーボード状態クラス
	struct KeyboardState
	{
		BYTE keyState[256];    //!< 仮想キーの状態
	};



	// メンバ変数 ----------------------------------------------
private:
	KeyboardState m_lastState;       //!< 前回のキーボードの状態
	KeyboardState m_currentState;    //!< 現在のキーボードの状態



									 // コンストラクタ ------------------------------------------
public:
	Keyboard();



	// デストラクタ --------------------------------------------
public:
	~Keyboard() = default;



	// 属性 ----------------------------------------------------
public:
	// 指定されたキーが押されているかどうかを判断
	bool IsKeyDown(BYTE key) const;

	// 指定されたキーが押されていないかどうかを判断
	bool IsKeyUp(BYTE key) const;

	// 指定されたキーが押されたかどうかを判断
	bool IsKeyPressed(BYTE key) const;

	// 指定されたキーが離されたかどうかを判断
	bool IsKeyReleased(BYTE key) const;



	// 操作 ----------------------------------------------------
public:
	// キーボードの状態の更新
	void Update();



	// 内部実装 ------------------------------------------------
private:
	// ある状態において指定されたキーが押されているかどうかを判断
	bool IsKeyDown(const KeyboardState& keyboardState, BYTE key) const;



	// 非実装 --------------------------------------------------
private:
	// コピーコンストラクタ
	Keyboard(const Keyboard&) = delete;

	// ムーブコンストラクタ
	Keyboard(Keyboard&&) = delete;

	// 代入演算子
	Keyboard& operator=(const Keyboard&) = delete;

	// ムーブ代入演算子
	Keyboard& operator=(Keyboard&&) = delete;
};